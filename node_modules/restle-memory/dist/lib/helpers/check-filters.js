/*
filters: {
  age: {
    $gt: 5,
    $lt: 10,
  },
  name: {
    $in: [ 'Bob', 'Jones' ],
  },
  height: 20,
},
*/

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = checkFilters;

function checkFilters(filters, record) {
  var operators = ['$gt', '$gte', '$lt', '$lte', '$in', '$eq', '$ne', '$nin'];

  for (var filter in filters) {
    if (!(filter in record)) return false;

    var _operators = filters[filter];

    // FIXME: sloppy
    if (isAllowedPrimitive(_operators)) {
      // apply primitive match
      // FIXME: the unstrict equality is on purpose because types aren't
      // being casted properly from the router
      if (record[filter] != _operators) return false;
    } else if (typeof _operators === 'function') {
      return _operators(record[filter]);
    } else {
      // apply complex filtering
      for (var operator in _operators) {
        if (!compare(operator, _operators[operator], record[filter])) return false;
      }
    }
  }

  return true;
}

;

var isAllowedPrimitive = function isAllowedPrimitive(value) {
  var allowedPrimitives = ['boolean', 'string', 'number'];

  return allowedPrimitives.indexOf(typeof value) >= 0;
};

var compare = function compare(operator, filter, value) {
  switch (operator) {
    case '$gt':
      return value > filter;
      break;

    case '$gte':
      return value >= filter;
      break;

    case '$lt':
      return value < filter;
      break;

    case '$lte':
      return value <= filter;
      break;

    case '$in':
      return filter.indexOf(value) >= 0;
      break;

    case '$nin':
      return filter.indexOf(value) === -1;
      break;

    case '$eq':
      return filter === value;
      break;

    case '$neq':
      return filter !== value;
      break;

    default:
      return filter === value;
      break;
  }
};
module.exports = exports['default'];