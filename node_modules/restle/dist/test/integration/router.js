'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _supertest = require('supertest');

var _supertest2 = _interopRequireDefault(_supertest);

exports['default'] = function (t, app) {
  return new _bluebird2['default'](function (resolve) {
    var request = (0, _supertest2['default'])('http://localhost:1337/api');

    t.test('GET /people (first time)', function (assert) {
      request.get('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        var body = res.body;
        assert.error(err, 'response status should be 200');
        assert.deepEqual(body, {
          links: {
            self: '/api/people'
          },
          meta: {
            total: 0
          },
          data: [],
          included: []
        }, 'response body should look good with a links and data members');
        assert.end();
      });
    });

    t.test('POST /people (without data)', function (assert) {
      request.post('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(400).end(function (err, res) {
        assert.error(err, 'no `data` key in post body gives 400');
        assert.ok(res.body.errors, 'the errors object is there');
        assert.notOk(res.body.data, 'the data object is not there');
        assert.notOk(res.body.includes, 'the includes object is not there');
        assert.end();
      });
    });

    t.test('POST /people (without data.type)', function (assert) {
      request.post('/people').set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({ data: { invalidData: true } })).expect('Content-Type', /application\/vnd\.api\+json/).expect(400).end(function (err, res) {
        assert.error(err, 'no `data.type` key in post body gives 400');
        assert.ok(res.body.errors, 'the errors object is there');
        assert.notOk(res.body.data, 'the data object is not there');
        assert.notOk(res.body.includes, 'the includes object is not there');
        assert.end();
      });
    });

    t.test('POST /people (with bad data.type)', function (assert) {
      request.post('/people').set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({ data: { type: 'animal' } })).expect('Content-Type', /application\/vnd\.api\+json/).expect(409).end(function (err, res) {
        assert.error(err, 'a bad type in post body gives 409');
        assert.ok(res.body.errors, 'the errors object is there');
        assert.end();
      });
    });

    t.test('POST /people (with data.type and attributes)', function (assert) {
      request.post('/people').set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({
        data: {
          type: 'person',
          attributes: {
            name: 'Bobby Jones',
            age: 22,
            email: 'bjones@gmail.com'
          }
        }
      })).expect('Content-Type', /application\/vnd\.api\+json/).expect(201).end(function (err, res) {
        var body = res.body;
        assert.error(err, 'successfully created should give 201');
        //assert.equal(res.headers.location, `/api/people/${body.data.id}`, 'the location header matches the links self member');

        assert.deepEqual(body, {
          links: {
            self: '/api/people/' + body.data.id
          },
          data: {
            type: 'person',
            id: body.data.id,
            attributes: {
              name: 'Bobby Jones',
              age: 22,
              email: 'bjones@gmail.com'
            },
            relationships: {
              pets: {
                data: [],
                links: {
                  self: '/api/people/' + body.data.id + '/relationships/pets',
                  related: '/api/people/' + body.data.id + '/pets'
                }
              },
              company: {
                data: null,
                links: {
                  self: '/api/people/' + body.data.id + '/relationships/company',
                  related: '/api/people/' + body.data.id + '/company'
                }
              }
            }
          },
          included: []
        }, 'the response body should have the proper links and primary data with attributes');
        assert.end();
      });
    });

    t.test('POST /animals then POST /people with animal relationship', function (assert) {
      request.post('/animals').set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({
        data: {
          type: 'animal',
          attributes: {
            species: 'Dog',
            age: 5
          }
        }
      })).expect('Content-Type', /application\/vnd\.api\+json/).expect(201).end(function (err, res) {
        var body = res.body;
        assert.error(err, 'successfully created animal should give 201');
        assert.deepEqual(body, {
          links: {
            self: '/api/animals/' + body.data.id
          },
          data: {
            type: 'animal',
            id: body.data.id,
            attributes: {
              species: 'Dog',
              age: 5
            },
            relationships: {
              owner: {
                data: null,
                links: {
                  self: '/api/animals/' + body.data.id + '/relationships/owner',
                  related: '/api/animals/' + body.data.id + '/owner'
                }
              },
              habitats: {
                data: [],
                links: {
                  self: '/api/animals/' + body.data.id + '/relationships/habitats',
                  related: '/api/animals/' + body.data.id + '/habitats'
                }
              }
            }
          },
          included: []
        }, 'the response body should have the proper links and primary data with attributes');

        request.post('/people').set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({
          data: {
            type: 'people',
            attributes: {
              name: 'Billy Smith'
            },
            relationships: {
              pets: {
                data: [{
                  type: 'animal',
                  id: body.data.id
                }]
              }
            }
          }
        })).expect('Content-Type', /application\/vnd\.api\+json/).expect(201).end(function (errPerson, resPerson) {
          var bodyPerson = resPerson.body;

          assert.error(errPerson, 'successfully created person should give 201');
          assert.deepEqual(bodyPerson, {
            links: {
              self: '/api/people/' + bodyPerson.data.id
            },
            data: {
              type: 'person',
              id: bodyPerson.data.id,
              attributes: {
                name: 'Billy Smith'
              },
              relationships: {
                pets: {
                  links: {
                    self: '/api/people/' + bodyPerson.data.id + '/relationships/pets',
                    related: '/api/people/' + bodyPerson.data.id + '/pets'
                  },
                  data: [{
                    type: 'animal',
                    id: '' + body.data.id
                  }]
                },
                company: {
                  links: {
                    self: '/api/people/' + bodyPerson.data.id + '/relationships/company',
                    related: '/api/people/' + bodyPerson.data.id + '/company'
                  },
                  data: null
                }
              }
            },
            included: [{
              attributes: {
                species: 'Dog',
                age: 5
              },
              relationships: {
                owner: {
                  data: null
                },
                habitats: {
                  data: []
                }
              },
              id: '' + body.data.id,
              type: 'animal',
              links: {
                self: '/api/animals/' + body.data.id
              }
            }]
          });
          assert.end();
        });
      });
    });

    t.test('PATCH /people/invalid', function (assert) {
      request.patch('/people/invalid').set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({
        data: {
          type: 'person',
          id: 'invalid',
          attributes: {
            name: 'New Name'
          }
        }
      })).expect('Content-Type', /application\/vnd\.api\+json/).expect(404).end(function (err, res) {
        var body = res.body;
        assert.error(err, 'PATCH /people/invalid should return a 404');
        // TODO: deep equal with errors
        assert.ok(body.errors, 'the errors object exists');
        assert.end();
      });
    });

    t.test('PATCH /people/55a67e56864054d13dd730a5', function (assert) {
      request.patch('/people/55a67e56864054d13dd730a5').set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({
        data: {
          type: 'person',
          id: '55a67e56864054d13dd730a5',
          attributes: {
            name: 'Another Name'
          }
        }
      })).expect('Content-Type', /application\/vnd\.api\+json/).expect(404).end(function (err, res) {
        var body = res.body;
        assert.error(err, 'PATCH /people/55a67e56864054d13dd730a5 should not find a resource and return a 404');
        // TODO: deep equal with errors
        assert.ok(body.errors, 'the errors object exists');
        assert.end();
      });
    });

    t.test('PATCH /people/different-ids', function (assert) {
      request.patch('/people/55a686e7ae28cf333f972e3e').set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({
        data: {
          type: 'person',
          id: '55a67e56864054d13dd730a5',
          attributes: {
            name: 'Another Name'
          }
        }
      })).expect('Content-Type', /application\/vnd\.api\+json/).expect(409).end(function (err, res) {
        var body = res.body;
        assert.error(err, 'PATCH /people/ with different ids type should return a 409');
        // TODO: deep equal
        assert.ok(body.errors, 'the errors object exists');
        assert.end();
      });
    });

    t.test('GET /people then PATCH first user with new attributes', function (assert) {
      request.get('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        var body = res.body;
        var id = body.data[0].id;

        assert.error(err, 'GET /people should give 200');

        request.patch('/people/' + id).set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({
          data: {
            type: 'person',
            id: '' + id,
            attributes: {
              name: 'New Name',
              age: 22,
              email: 'bjones@gmail.com'
            }
          }
        })).expect(204).end(function (newErr) {
          assert.error(newErr, 'PATCH should give 204');
          assert.end();
        });
      });
    });

    t.test('GET /people/invalid', function (assert) {
      request.get('/people/invalid').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(404).end(function (err, res) {
        var body = res.body;
        assert.error(err, 'GET /people/invalid should return a 404');
        // TODO: deep equal with errors
        assert.ok(body.errors, 'the errors object exists');
        assert.end();
      });
    });

    t.test('GET /people/55a67e56864054d13dd730a5', function (assert) {
      request.get('/people/55a67e56864054d13dd730a5').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(404).end(function (err, res) {
        var body = res.body;
        assert.error(err, 'GET /people/55a67e56864054d13dd730a5 should not find a resource and return a 404');
        // TODO: deep equal with errors
        assert.ok(body.errors, 'the errors object exists');
        assert.end();
      });
    });

    t.test('GET /people to check attributes', function (assert) {
      request.get('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        var body = res.body;
        assert.error(err, 'get /people should give 200');
        assert.equal(body.data.length, 2, 'there should be two people in the database');
        var id = res.body.data[0].id;
        assert.ok(id, 'there is a valid id for the first user returned');

        request.get('/people/' + id).set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (newErr, newRes) {
          var newBody = newRes.body;

          assert.deepEqual(newBody, {
            links: {
              self: '/api/people/' + id
            },
            data: {
              type: 'person',
              id: '' + id,
              attributes: {
                name: 'New Name',
                email: 'bjones@gmail.com',
                age: 22
              },
              relationships: {
                pets: {
                  data: [],
                  links: {
                    self: '/api/people/' + id + '/relationships/pets',
                    related: '/api/people/' + id + '/pets'
                  }
                },
                company: {
                  data: null,
                  links: {
                    self: '/api/people/' + id + '/relationships/company',
                    related: '/api/people/' + id + '/company'
                  }
                }
              }
            },
            included: []
          });
          assert.end();
        });
      });
    });

    t.test('GET /people then GET /people/:id/relationships/pets', function (assert) {
      request.get('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        var body = res.body;
        assert.error(err, 'get /people should give 200');
        assert.equal(body.data.length, 2, 'there should be two people in the database');
        var firstId = body.data[0].id;
        var secondId = body.data[1].id;
        assert.ok(firstId, 'there is a valid id for the first user returned');
        assert.ok(secondId, 'there is a valid id for the second user returned');

        request.get('/people/' + firstId + '/relationships/pets').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (firstErr, firstRes) {
          var firstBody = firstRes.body;
          assert.deepEqual(firstBody, {
            links: {
              self: '/api/people/' + firstId + '/relationships/pets',
              related: '/api/people/' + firstId + '/pets'
            },
            data: []
          }, 'first relationships response has valid links and empty data array');

          request.get('/people/' + secondId + '/relationships/pets').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (secondErr, secondRes) {
            var secondBody = secondRes.body;

            assert.deepEqual(secondBody, {
              links: {
                self: '/api/people/' + secondId + '/relationships/pets',
                related: '/api/people/' + secondId + '/pets'
              },
              data: [{
                type: 'animal',
                id: secondBody.data[0].id
              }]
            }, 'second relationships response has valid links and populated data array');
            assert.end();
          });
        });
      });
    });

    t.test('GET /people then PATCH /people/:id/relationships/pets with []', function (assert) {
      request.get('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (peopleErr, peopleRes) {
        var peopleBody = peopleRes.body;
        var peopleId = peopleBody.data[1].id;
        assert.error(peopleErr, 'GET /people should give 200 and correct media type');
        assert.ok(peopleId, 'the second person resource has an id');

        request.patch('/people/' + peopleId + '/relationships/pets').set('Content-Type', 'application/vnd.api+json').expect(204).send(JSON.stringify({
          data: []
        })).end(function (relationshipErr) {
          assert.error(relationshipErr, 'PATCH /people/:id/relationships/pets should give 204');
          assert.end();
        });
      });
    });

    t.test('GET /people then GET /animals then POST /people/:id/relationships/pets with an animal', function (assert) {
      request.get('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (peopleErr, peopleRes) {
        var peopleBody = peopleRes.body;
        var peopleId = peopleBody.data[1].id;
        assert.error(peopleErr, 'GET /people should give 200 and correct media type');
        assert.ok(peopleId, 'the second person resource has an id');

        request.get('/animals').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (animalsErr, animalsRes) {
          var animalsBody = animalsRes.body;
          var animalId = animalsBody.data[0].id;
          assert.error(animalsErr, 'GET /animals should give 200 and correct media type');
          assert.ok(animalId, 'the first animal resource has an id');

          request.post('/people/' + peopleId + '/relationships/pets').set('Content-Type', 'application/vnd.api+json').expect(204).send(JSON.stringify({
            data: [{
              id: '' + animalId,
              type: 'animal'
            }]
          })).end(function (relationshipErr) {
            assert.error(relationshipErr, 'POST /people/:id/relationships/pets should give 204');
            assert.end();
          });
        });
      });
    });

    t.test('GET /people then GET /animals then POST /animals/:id/relationships/owner with a person', function (assert) {
      request.get('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (peopleErr, peopleRes) {
        var peopleBody = peopleRes.body;
        var peopleId = peopleBody.data[1].id;
        assert.error(peopleErr, 'GET /people should give 200 and correct media type');
        assert.ok(peopleId, 'the second person resource has an id');

        request.get('/animals').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (animalsErr, animalsRes) {
          var animalsBody = animalsRes.body;
          var animalId = animalsBody.data[0].id;
          assert.error(animalsErr, 'GET /animals should give 200 and correct media type');
          assert.ok(animalId, 'the first animal resource has an id');

          request.post('/animals/' + animalId + '/relationships/owner').set('Content-Type', 'application/vnd.api+json').expect(403).send(JSON.stringify({
            data: [{
              id: '' + peopleId,
              type: 'person'
            }]
          })).end(function (relationshipErr, relationshipRes) {
            assert.error(relationshipErr, 'POST /animals/' + animalId + '/relationships/owner should give 403');
            assert.ok(relationshipRes.body.errors, 'the errors object is there.');
            assert.end();
          });
        });
      });
    });

    t.test('GET /people then GET /animals then PATCH /animals/:id/relationships/owner with an array of people', function (assert) {
      request.get('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (peopleErr, peopleRes) {
        var peopleBody = peopleRes.body;
        var peopleId = peopleBody.data[1].id;
        assert.error(peopleErr, 'GET /people should give 200 and correct media type');
        assert.ok(peopleId, 'the second person resource has an id');

        request.get('/animals').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (animalsErr, animalsRes) {
          var animalsBody = animalsRes.body;
          var animalId = animalsBody.data[0].id;
          assert.error(animalsErr, 'GET /animals should give 200 and correct media type');
          assert.ok(animalId, 'the first animal resource has an id');

          request.patch('/animals/' + animalId + '/relationships/owner').set('Content-Type', 'application/vnd.api+json').expect(403).send(JSON.stringify({
            data: [{
              id: '' + peopleId,
              type: 'person'
            }]
          })).end(function (relationshipErr, relationshipRes) {
            assert.error(relationshipErr, 'PATCH /animals/' + animalId + '/relationships/owner should give 403');
            assert.ok(relationshipRes.body.errors, 'the errors object is there.');
            assert.end();
          });
        });
      });
    });

    t.test('GET /people then GET /animals then PATCH /animals/:id/relationships/owner with a single person', function (assert) {
      request.get('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (peopleErr, peopleRes) {
        var peopleBody = peopleRes.body;
        var peopleId = peopleBody.data[1].id;
        assert.error(peopleErr, 'GET /people should give 200 and correct media type');
        assert.ok(peopleId, 'the second person resource has an id');

        request.get('/animals').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (animalsErr, animalsRes) {
          var animalsBody = animalsRes.body;
          var animalId = animalsBody.data[0].id;
          assert.error(animalsErr, 'GET /animals should give 200 and correct media type');
          assert.ok(animalId, 'the first animal resource has an id');

          request.patch('/animals/' + animalId + '/relationships/owner').set('Content-Type', 'application/vnd.api+json').expect(204).send(JSON.stringify({
            data: {
              id: '' + peopleId,
              type: 'person'
            }
          })).end(function (relationshipErr) {
            assert.error(relationshipErr, 'PATCH /animals/' + animalId + '/relationships/owner should give 204');
            assert.end();
          });
        });
      });
    });

    t.test('GET /people then GET /animals then GET /animals/:id/relationships/owner', function (assert) {
      request.get('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (peopleErr, peopleRes) {
        var peopleBody = peopleRes.body;
        var peopleId = peopleBody.data[1].id;
        assert.error(peopleErr, 'GET /people should give 200 and correct media type');
        assert.ok(peopleId, 'the second person resource has an id');

        request.get('/animals').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (animalsErr, animalsRes) {
          assert.error(animalsErr, 'GET /animals should give 200');
          var animalsBody = animalsRes.body;
          var animalId = animalsBody.data[0].id;
          assert.ok(animalId, 'there is a valid id for the first animal returned');

          request.get('/animals/' + animalId + '/relationships/owner').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (relationshipErr, relationshipRes) {
            var relationshipBody = relationshipRes.body;

            assert.error(relationshipErr, 'GET /animals/' + animalId + '/relationships/owner should give 200');
            assert.deepEqual(relationshipBody, {
              links: {
                self: '/api/animals/' + animalId + '/relationships/owner',
                related: '/api/animals/' + animalId + '/owner'
              },
              data: {
                id: '' + peopleId,
                type: 'person'
              }
            }, 'first relationships response has valid links and data array');
            assert.end();
          });
        });
      });
    });

    t.test('GET /animals then GET /animals/:id/owner', function (assert) {
      request.get('/animals').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (animalsErr, animalsRes) {
        assert.error(animalsErr, 'GET /animals should give 200');
        var animalsBody = animalsRes.body;
        var animalId = animalsBody.data[0].id;
        assert.ok(animalId, 'there is a valid id for the first animal returned');

        request.get('/animals/' + animalId + '/owner').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (relationshipErr, relationshipRes) {
          var relationshipBody = relationshipRes.body;
          var ownerId = relationshipBody.data.id;
          assert.error(relationshipErr, 'GET /animals/' + animalId + '/relationships/owner should give 200');
          assert.deepEqual(relationshipBody, {
            links: {
              self: '/api/animals/' + animalId + '/owner'
            },
            data: {
              id: '' + ownerId,
              type: 'person',
              attributes: {
                name: 'Billy Smith'
              },
              relationships: {
                pets: {
                  links: {
                    self: '/api/people/' + ownerId + '/relationships/pets',
                    related: '/api/people/' + ownerId + '/pets'
                  },
                  data: [{
                    id: '1',
                    type: 'animal'
                  }]
                },
                company: {
                  links: {
                    self: '/api/people/' + ownerId + '/relationships/company',
                    related: '/api/people/' + ownerId + '/company'
                  },
                  data: null
                }
              }
            },
            included: [{
              id: '1',
              type: 'animal',
              attributes: {
                species: 'Dog',
                age: 5
              },
              links: {
                self: '/api/animals/1'
              }
            }]
          }, 'first relationships response has valid links and data array');
          assert.end();
        });
      });
    });

    t.test('GET /animals then GET /animals:id', function (assert) {
      request.get('/animals').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (animalsErr, animalsRes) {
        assert.error(animalsErr, 'GET /animals should give 200');
        var animalsBody = animalsRes.body;
        var animalId = animalsBody.data[0].id;
        assert.ok(animalId, 'there is a valid id for the first animal returned');

        request.get('/animals/' + animalId).set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (animalErr) {
          assert.error(animalErr, 'GET /animals/' + animalId + '/ should give 200');
          assert.end();
        });
      });
    });

    t.test('GET /people then GET /animals then DELETE /people/:id/relationships/pets with an animal', function (assert) {
      request.get('/people').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (peopleErr, peopleRes) {
        var peopleBody = peopleRes.body;
        var peopleId = peopleBody.data[1].id;
        assert.error(peopleErr, 'GET /people should give 200 and correct media type');
        assert.ok(peopleId, 'the second person resource has an id');

        request.get('/animals').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (animalsErr, animalsRes) {
          var animalsBody = animalsRes.body;
          var animalId = animalsBody.data[0].id;

          assert.error(animalsErr, 'GET /animals should give 200 and correct media type');
          assert.ok(animalId, 'the first animal resource has an id');

          request['delete']('/people/' + peopleId + '/relationships/pets').set('Content-Type', 'application/vnd.api+json').expect(204).send(JSON.stringify({
            data: [{
              id: '' + animalId,
              type: 'animal'
            }]
          })).end(function (relationshipErr) {
            assert.error(relationshipErr, 'DELETE /people/:id/relationships/pets should give 204');
            assert.end();
          });
        });
      });
    });

    t.test('GET /animals then DELETE /animals/:id then GET /animals to make sure there are none left', function (assert) {
      request.get('/animals').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (animalsErr, animalsRes) {
        var animalsBody = animalsRes.body;
        var animalId = animalsBody.data[0].id;
        assert.error(animalsErr, 'GET /animals should give 200 and correct media type');
        assert.ok(animalId, 'the first animal resource has an id');

        request['delete']('/animals/' + animalId).set('Content-Type', 'application/vnd.api+json').expect(204).end(function (animalErr) {
          assert.error(animalErr, 'DELETE /animals/:id should give 204');

          request.get('/animals').set('Content-Type', 'application/vnd.api+json').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (secondAnimalsErr, secondAnimalsRes) {
            var secondAnimalsBody = secondAnimalsRes.body;
            assert.error(secondAnimalsErr, 'GET /animals should give 200 and correct media type');
            assert.deepEqual(secondAnimalsBody, {
              links: {
                self: '/api/animals'
              },
              data: [],
              included: [],
              meta: {
                total: 0
              }
            }, 'the animals body has correct links and empty data');
            assert.end();
          });
        });
      });
    });

    t.test('POST /animals with species cat, dog, zebra', function (assert) {
      request.post('/animals').set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({
        data: {
          type: 'animal',
          attributes: {
            species: 'Cat',
            age: 10
          }
        }
      })).expect('Content-Type', /application\/vnd\.api\+json/).expect(201).end(function (catErr) {
        assert.error(catErr, 'successfully created cat should give 201');

        request.post('/animals').set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({
          data: {
            type: 'animal',
            attributes: {
              species: 'Dog',
              age: 5
            }
          }
        })).expect('Content-Type', /application\/vnd\.api\+json/).expect(201).end(function (dogErr) {
          assert.error(dogErr, 'successfully created dog should give 201');

          request.post('/animals').set('Content-Type', 'application/vnd.api+json').send(JSON.stringify({
            data: {
              type: 'animal',
              attributes: {
                species: 'Zebra',
                age: 14
              }
            }
          })).expect('Content-Type', /application\/vnd\.api\+json/).expect(201).end(function (zebraErr) {
            assert.error(zebraErr, 'successfully created cat should give 201');
            assert.end();
          });
        });
      });
    });

    // TODO: deep equal
    t.test('GET /animals?page[offset]=1&page[limit]=2', function (assert) {
      request.get('/animals?page[offset]=1&page[limit]=2').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        var body = res.body;

        assert.error(err, 'GET /animals?page[offset]=1&page[limit]=1 should give 200');
        assert.equal(res.body.data.length, 2, 'num results is good');
        assert.equal(res.body.meta.total, 3, 'meta total property is good');
        assert.end();
      });
    });

    t.test('GET /animals?sort=species,-age', function (assert) {
      request.get('/animals?sort=species,-age').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        assert.error(err, 'GET /animals?sort=species,-age');
        assert.end();
      });
    });

    t.test('GET /animals?sort=-species,-age', function (assert) {
      request.get('/animals?sort=-species,-age').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        assert.error(err, 'GET /animals?sort=-species,-age');
        assert.end();
      });
    });

    t.test('GET /animals?sort=-age', function (assert) {
      request.get('/animals?sort=-age').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        assert.error(err, 'GET /animals?sort=-age');
        assert.end();
      });
    });

    t.test('GET /animals?filter[species]=Dog', function (assert) {
      request.get('/animals?filter[species]=Dog').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        assert.error(err, 'GET /animals?species[filter]=Dog');
        assert.equal(res.body.meta.total, 1, 'only one animal that is a dog');
        assert.end();
      });
    });

    t.test('GET /animals?species=Dog', function (assert) {
      request.get('/animals?species=Dog').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        assert.error(err, 'GET /animals?species=Dog');
        assert.equal(res.body.meta.total, 1, 'only one animal that is a dog');
        assert.end();
      });
    });

    t.test('GET /animals?filter[species]=Zebra&filter[age]=14', function (assert) {
      request.get('/animals?filter[species]=Zebra&filter[age]=14').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        assert.error(err, 'GET /animals?filter[species]=Zebra&filter[age]=14');
        assert.equal(res.body.meta.total, 1, 'only one animal that is a zebra and 14');
        assert.end();
      });
    });

    t.test('GET /animals?species=Zebra&age=14', function (assert) {
      request.get('/animals?species=Zebra&age=14').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        assert.error(err, 'GET /animals?species=Zebra&age=14');
        assert.equal(res.body.meta.total, 1, 'only one animal that is a zebra and 14');
        assert.end();
      });
    });

    t.test('GET /animals?filter[age][$gt]=10', function (assert) {
      request.get('/animals?filter[age][$gt]=10').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        assert.error(err, 'GET /animals?filter[age][$gt]=10');
        assert.equal(res.body.meta.total, 1, 'only one animal that is a zebra');
        assert.equal(res.body.data[0].attributes.species, 'Zebra', 'filtered result is indeed a Zebra');
        assert.end();
      });
    });

    t.test('GET /animals?filter[age][$gt]=14', function (assert) {
      request.get('/animals?filter[age][$gt]=14').expect('Content-Type', /application\/vnd\.api\+json/).expect(200).end(function (err, res) {
        assert.error(err, 'GET /animals?filter[age][$gt]=14');
        assert.equal(res.body.meta.total, 0, 'no animals are older than 14');
        assert.end();
      });
    });

    t.test('done', function (assert) {
      assert.pass('finished');
      resolve(true);
    });
  });
};

module.exports = exports['default'];