'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _i = require('i');

var _i2 = _interopRequireDefault(_i);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _model = require('../model');

var _model2 = _interopRequireDefault(_model);

var _modelResource = require('../model/resource');

var _modelResource2 = _interopRequireDefault(_modelResource);

var _restleError = require('restle-error');

// router utilites

var _utilsCheckContentType = require('./utils/check-content-type');

var _utilsCheckContentType2 = _interopRequireDefault(_utilsCheckContentType);

var _utilsCheckPost = require('./utils/check-post');

var _utilsCheckPost2 = _interopRequireDefault(_utilsCheckPost);

var _utilsCheckUpdate = require('./utils/check-update');

var _utilsCheckUpdate2 = _interopRequireDefault(_utilsCheckUpdate);

var _utilsParseRequestBody = require('./utils/parse-request-body');

var _utilsParseRequestBody2 = _interopRequireDefault(_utilsParseRequestBody);

var _utilsParseSortQuery = require('./utils/parse-sort-query');

var _utilsParseSortQuery2 = _interopRequireDefault(_utilsParseSortQuery);

var _utilsParseFields = require('./utils/parse-fields');

var _utilsParseFields2 = _interopRequireDefault(_utilsParseFields);

// general utilites

var _utilsParseModelName = require('../utils/parse-model-name');

var _utilsParseModelName2 = _interopRequireDefault(_utilsParseModelName);

/**
 * The Router class is Restle's view layer - it uses Express and manages the
 * routes defined in the www.jsonapi.org specification. The Router uses Restle's
 * internal ORM to manage CRUD, handles query related operations like filtering,
 * sorting, pagination, inclusion, etc.
 *
 * @todo Sparse fieldsets and inclusion.
 * @private
 */

var Router = (function () {
  function Router() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Router);

    var port = options.port;
    var namespace = options.namespace;
    var restle = options.restle;

    var router = new _express2['default'].Router();

    Object.assign(this, {
      port: port, namespace: namespace, restle: restle, router: router
    });

    this.setupRoutes();
  }

  /**
   * This method is an alias for `Restle.Model.model()`.
   *
   * @private
   * @param {String} type
   * @return {Restle.Model}
   */

  _createClass(Router, [{
    key: 'model',
    value: function model(type) {
      return this.restle.model(type);
    }

    /**
     * This method fetches all resources of type `req.params.type`, then
     * serializes the response JSON.
     *
     * @private
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     */
  }, {
    key: 'find',
    value: function find(req, res, next) {
      var type = req.params.type;

      var options = req.query;
      var model = this.model(type);

      if (undefined === model) return res.sendStatus(404);

      options.filter = options.filter || {};
      Object.assign(options.filter, (0, _utilsParseFields2['default'])(model, options));

      if ('sort' in options) options.sort = (0, _utilsParseSortQuery2['default'])(options.sort);

      model.find(options).then(function (resourceArray) {
        req.resourceArray = resourceArray;
        return next();
      })['catch'](_restleError.AdapterError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](function (err) {
        return res.sendStatus(500);
      });
    }

    /**
     * This method fetches a single resources of type `req.params.type`, then
     * serializes the response JSON.
     *
     * @private
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     */
  }, {
    key: 'findResource',
    value: function findResource(req, res, next) {
      var _req$params = req.params;
      var type = _req$params.type;
      var id = _req$params.id;

      var model = this.model(type);

      if (undefined === model) return res.sendStatus(404);

      model.findResource(id).then(function (resource) {
        req.resource = resource;
        return next();
      })['catch'](_restleError.NotFoundError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](_restleError.AdapterError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](function (err) {
        return res.sendStatus(500);
      });
    }

    /**
     * This method fetches a resource or resource array that is related to a
     * particular resource.
     *
     * @todo Refactor resourceArray name
     * @private
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     */
  }, {
    key: 'findRelated',
    value: function findRelated(req, res, next) {
      var _req$params2 = req.params;
      var type = _req$params2.type;
      var id = _req$params2.id;
      var field = _req$params2.field;

      var options = req.query;
      var model = this.model(type);

      if (undefined === model) return res.sendStatus(404);

      if ('sort' in options) options.sort = (0, _utilsParseSortQuery2['default'])(options.sort);

      model.findRelated(id, field, options).then(function (resourceArray) {
        req.resourceArray = resourceArray;
        return next();
      })['catch'](_restleError.NotFoundError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](_restleError.AdapterError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](function (err) {
        throw res.sendStatus(500);
      });
    }

    /**
     * This method creates a single resources of type `req.params.type`, then
     * serializes the response JSON.
     *
     * @private
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     */
  }, {
    key: 'createResource',
    value: function createResource(req, res, next) {
      var _this = this;

      var isBadRequest = (0, _utilsCheckPost2['default'])(req, res);

      if (isBadRequest) return res.status(isBadRequest.status).json(isBadRequest.json);

      var body = (0, _utilsParseRequestBody2['default'])(req.body);
      var type = (0, _utilsParseModelName2['default'])(req.params.type);
      var model = this.model(type);

      if (undefined === model) return res.sendStatus(404);

      model.create(body).then(function (resource) {
        res.set('location', _this.namespace + '/' + resource.type + '/' + resource.id);
        res.status(201);
        req.resource = resource;

        return next();
      })['catch'](_restleError.AdapterError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](function (err) {
        throw res.sendStatus(500);
      });
    }

    /**
     * This method updates a single resources of type `req.params.type`, then
     * sends a 204.
     *
     * @todo Send a 200 if any other properties outside the request context change
     * @private
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     */
  }, {
    key: 'updateResource',
    value: function updateResource(req, res, next) {
      var isBadRequest = (0, _utilsCheckUpdate2['default'])(req, res);

      if (isBadRequest) return res.status(isBadRequest.status).json(isBadRequest.json);

      var body = (0, _utilsParseRequestBody2['default'])(req.body);
      var type = (0, _utilsParseModelName2['default'])(req.params.type);
      var id = req.params.id;
      var model = this.model(type);

      if (undefined === model) return res.sendStatus(404);

      model.update(id, body).then(function (resource) {
        req.resource = resource;
        return next();
      })['catch'](_restleError.NotFoundError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](_restleError.AdapterError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](function (err) {
        return res.sendStatus(500);
      });
    }

    /**
     * This method deletes a single resources of type `req.params.type` with an id
     * of `req.params.id`.
     *
     * @private
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     */
  }, {
    key: 'deleteResource',
    value: function deleteResource(req, res, next) {
      var _req$params3 = req.params;
      var type = _req$params3.type;
      var id = _req$params3.id;

      var model = this.model(type);

      if (undefined === model) return res.sendStatus(403);

      model['delete'](id).then(function (success) {
        return next();
      })['catch'](_restleError.NotFoundError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](_restleError.AdapterError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](function (err) {
        throw res.sendStatus(500);
      });
    }

    /**
     * This method returns a relationship.
     *
     * @private
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     */
  }, {
    key: 'findRelationship',
    value: function findRelationship(req, res, next) {
      var _req$params4 = req.params;
      var type = _req$params4.type;
      var id = _req$params4.id;
      var field = _req$params4.field;

      var model = this.model(type);

      if (undefined === model) return res.sendStatus(404);

      model.findResource(id).then(function (resource) {
        req.relationship = resource.relationship(field);
        return next();
      })['catch'](_restleError.NotFoundError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](_restleError.AdapterError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](function (err) {
        return res.sendStatus(500);
      });
    }

    /**
     * This method updates a relationship.
     *
     * @private
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     */
  }, {
    key: 'updateRelationship',
    value: function updateRelationship(req, res, next) {
      var _req$params5 = req.params;
      var type = _req$params5.type;
      var id = _req$params5.id;
      var field = _req$params5.field;

      var model = this.model(type);
      var body = req.body;

      if (undefined === model) return res.sendStatus(404);

      model.findResource(id).then(function (resource) {
        var relationship = resource.relationship(field);

        if (undefined === relationship) return res.sendStatus(404);

        var ids = Array.isArray(body.data) ? body.data.map(function (d) {
          return d.id;
        }) : body.data.id;

        return relationship.set(ids);
      }).then(function (resource) {
        return next();
      })['catch'](_restleError.NotFoundError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](_restleError.RelationshipError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](_restleError.AdapterError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](function (err) {
        return res.sendStatus(500);
      });
    }

    /**
     * This method appends a resource to a relationship.
     *
     * @private
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     */
  }, {
    key: 'appendRelationship',
    value: function appendRelationship(req, res, next) {
      var _req$params6 = req.params;
      var type = _req$params6.type;
      var id = _req$params6.id;
      var field = _req$params6.field;

      var model = this.model(type);
      var body = req.body;

      if (undefined === model) return res.sendStatus(404);

      model.findResource(id).then(function (resource) {
        var relationship = resource.relationship(field);

        if (undefined === relationship) return res.sendStatus(404);

        var ids = Array.isArray(body.data) ? body.data.map(function (d) {
          return d.id;
        }) : body.data.id;

        return relationship.append(ids);
      }).then(function (resource) {
        return next();
      })['catch'](_restleError.NotFoundError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](_restleError.RelationshipError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](_restleError.AdapterError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](function (err) {
        return res.sendStatus(500);
      });
    }

    /**
     * This method deletes resourc(s) from a relationship.
     *
     * @private
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     */
  }, {
    key: 'deleteRelationship',
    value: function deleteRelationship(req, res, next) {
      var _req$params7 = req.params;
      var type = _req$params7.type;
      var id = _req$params7.id;
      var field = _req$params7.field;

      var model = this.model(type);
      var body = req.body;

      if (undefined === model) return res.sendStatus(404);

      model.findResource(id).then(function (resource) {
        var relationship = resource.relationship(field);

        if (undefined === relationship) return res.sendStatus(404);

        var ids = Array.isArray(body.data) ? body.data.map(function (d) {
          return d.id;
        }) : body.data.id;

        return relationship['delete'](ids);
      }).then(function (resource) {
        return next();
      })['catch'](_restleError.NotFoundError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](_restleError.RelationshipError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](function (err) {
        return res.sendStatus(500);
      });
    }

    /**
     * This method fetches a resource or resource array that is related to a
     * particular resource.
     *
     * @todo Add before and after events for finding related.
     * @private
     * @param {Object} req
     * @param {Object} res
     */
  }, {
    key: 'findRelated',
    value: function findRelated(req, res) {
      var _req$params8 = req.params;
      var type = _req$params8.type;
      var id = _req$params8.id;
      var field = _req$params8.field;

      var options = req.query;
      var model = this.model(type);

      if (undefined === model) return res.sendStatus(404);

      if ('sort' in options) options.sort = (0, _utilsParseSortQuery2['default'])(options.sort);

      var namespace = this.namespace;

      model.findRelated(id, field, options).then(function (results) {
        res.json(results.serialize({ namespace: namespace }));
      })['catch'](_restleError.NotFoundError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](_restleError.AdapterError, function (err) {
        return res.status(err.status).json(err.serialize());
      })['catch'](function (err) {
        throw res.sendStatus(500);
      });
    }

    /**
     * This method creates the appropriate routes determined by the JSON API spec:
     *
     * ```js
     *   GET /:type
     *   POST /:type
     *
     *   GET /:type/:id
     *   PATCH /:type/:id
     *   DELETE /:type/:id
     *
     *   GET /:type/:id/relationships/:field
     *   POST /:type/:id/relationships/:field
     *   PATCH /:type/:id/relationships/:field
     *   DELETE /:type/:id/relationships/:field
     *
     *   GET /:type/:id/:field
     * ```
     *
     * This method also sets up the `before` and `after` events.
     *
     * @private
     * @todo Needs major refactoring
     * @param {Object} req
     * @param {Object} res
     */
  }, {
    key: 'setupRoutes',
    value: function setupRoutes() {
      var _this2 = this;

      var router = this.router;
      var manyResourcesEndpoint = '/:type';
      var singleResourceEndpoint = '/:type/:id';
      var relationshipEndpoint = '/:type/:id/relationships/:field';
      var relatedEndpoint = '/:type/:id/:field';

      // content type
      router.use(function (req, res, next) {
        res.set('content-type', 'application/vnd.api+json');
        next();
      });

      // handle events
      router.all('*', function (req, res, next) {
        var event = 'before';
        var restle = _this2.restle;

        return restle.listeners(event).length ? restle.emit(event, req, res, next) : next();
      });

      router.route(manyResourcesEndpoint)

      // handle before event
      .all(function (req, res, next) {
        var method = req.method.toLowerCase();
        var modelName = (0, _utilsParseModelName2['default'])(req.params.type);
        var restle = _this2.restle;
        var event = modelName + '.' + (method === 'get' ? 'find.before' : 'create.before');

        return restle.listeners(event).length ? restle.emit(event, req, res, next) : next();
      })

      // retrieve many resources
      .get(function (req, res, next) {
        return _this2.find(req, res, next);
      })

      // create a resource
      .post(function (req, res, next) {
        if (!(0, _utilsCheckContentType2['default'])(req)) {
          return res.sendStatus(415);
        }

        return _this2.createResource(req, res, next);
      })

      // handle after event
      .all(function (req, res, next) {
        var method = req.method.toLowerCase();
        var modelName = (0, _utilsParseModelName2['default'])(req.params.type);
        var event = modelName + '.' + (method === 'get' ? 'find.after' : 'create.after');
        var restle = _this2.restle;
        var resourceArray = req.resourceArray || req.resource;

        return restle.listeners(event).length ? restle.emit(event, resourceArray, req, res, next) : next();
      })

      // serialize response
      .all(function (req, res, next) {
        var type = req.params.type;
        var options = {
          namespace: _this2.namespace
        };

        return res.json(req.resourceArray ? req.resourceArray.serialize(options) : req.resource.serialize(options));
      });

      router.route(singleResourceEndpoint)

      // handle before event
      .all(function (req, res, next) {
        var method = req.method.toLowerCase();
        var modelName = (0, _utilsParseModelName2['default'])(req.params.type);
        var restle = _this2.restle;

        var events = {
          get: modelName + '.findOne.before',
          patch: modelName + '.update.before',
          'delete': modelName + '.delete.before'
        };

        var event = events[method];

        return restle.listeners(event).length ? restle.emit(event, req, res, next) : next();
      })

      // retreive a single resource
      .get(function (req, res, next) {
        return _this2.findResource(req, res, next);
      })

      // update a single resource
      .patch(function (req, res, next) {
        if (!(0, _utilsCheckContentType2['default'])(req)) {
          return res.sendStatus(415);
        }

        return _this2.updateResource(req, res, next);
      })

      // delete a single resource
      ['delete'](function (req, res, next) {
        return _this2.deleteResource(req, res, next);
      })

      // handle after event
      .all(function (req, res, next) {
        var method = req.method.toLowerCase();
        var modelName = (0, _utilsParseModelName2['default'])(req.params.type);
        var restle = _this2.restle;
        var resource = req.resource;

        var events = {
          get: modelName + '.findOne.after',
          patch: modelName + '.update.after',
          'delete': modelName + '.delete.after'
        };

        var event = events[method];

        if (restle.listeners(event).length) {
          return restle.emit(event, resource, req, res, next);
        }

        return next();
      })

      // serialize response
      .all(function (req, res, next) {
        var method = req.method.toLowerCase();
        var namespace = _this2.namespace;

        // TODO: send 200 if other props are updated
        if (method === 'patch' || method === 'delete') {
          return res.sendStatus(204);
        }

        return res.json(req.resource.serialize({ namespace: namespace }));
      });

      router.route(relationshipEndpoint)

      // handle before events
      .all(function (req, res, next) {
        var method = req.method.toLowerCase();
        var modelName = (0, _utilsParseModelName2['default'])(req.params.type);
        var restle = _this2.restle;
        var events = {
          get: modelName + '.findRelationship.before',
          patch: modelName + '.updateRelationship.before',
          'delete': modelName + '.deleteRelationship.before',
          post: modelName + '.appendRelationship.before'
        };

        var event = events[method];

        if (restle.listeners(event).length) {
          return restle.emit(event, req, res, next);
        }

        return next();
      })

      // retrieve a relationship
      .get(function (req, res, next) {
        return _this2.findRelationship(req, res, next);
      })

      // append relationship
      .post(function (req, res, next) {
        if (!(0, _utilsCheckContentType2['default'])(req)) {
          return res.sendStatus(415);
        }

        return _this2.appendRelationship(req, res, next);
      })

      // update relationship
      .patch(function (req, res, next) {
        if (!(0, _utilsCheckContentType2['default'])(req)) {
          return res.sendStatus(415);
        }

        return _this2.updateRelationship(req, res, next);
      })

      // delete a relationship
      ['delete'](function (req, res, next) {
        if (!(0, _utilsCheckContentType2['default'])(req)) {
          return res.sendStatus(415);
        }

        return _this2.deleteRelationship(req, res, next);
      })

      // handle after event
      .all(function (req, res, next) {
        var method = req.method.toLowerCase();
        var modelName = (0, _utilsParseModelName2['default'])(req.params.type);
        var restle = _this2.restle;

        var events = {
          get: modelName + '.findRelationship.after',
          patch: modelName + '.updateRelationship.after',
          'delete': modelName + '.deleteRelationship.after',
          post: modelName + '.appendRelationship.after'
        };

        var event = events[method];
        var relationship = req.relationship;

        if (restle.listeners(event).length) {
          return restle.emit(event, relationship, req, res, next);
        }

        return next();
      })

      // serialize response
      .all(function (req, res, next) {
        if (!req.relationship) {
          return res.sendStatus(204);
        }

        var namespace = _this2.namespace;
        return res.json(req.relationship.serialize({ namespace: namespace }));
      });

      router.route(relatedEndpoint).get(function (req, res) {
        return _this2.findRelated(req, res);
      });
    }
  }]);

  return Router;
})();

exports['default'] = Router;
module.exports = exports['default'];