'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var _bind = Function.prototype.bind;
var _slice = Array.prototype.slice;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _resource = require('./resource');

var _resource2 = _interopRequireDefault(_resource);

var _resourceArray = require('./resource-array');

var _resourceArray2 = _interopRequireDefault(_resourceArray);

var _relationship = require('./relationship');

var _relationship2 = _interopRequireDefault(_relationship);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

/**
 * A Model defines the relationships and attributes of a resource using a
 * schema. The Model class is used to create, read, update, and delete resources
 * using an Adapter.
 *
 * @class Model
 */

var Model = (function () {
  /**
   * @ignore
   */

  function Model(type, schema, adapter) {
    _classCallCheck(this, Model);

    if (undefined === type) throw new Error('A model must have a `type` string.');

    if (undefined === schema) throw new Error('A model must have a `schema` object.');

    this.type = type;
    this.adapter = adapter;

    this.relationships = schema.relationships || {};
    this.attributes = schema.attributes || {};
  }

  /**
   * @ignore
   */

  _createClass(Model, [{
    key: 'find',

    /**
     * This method retrieves records from the adapter that match the options
     * criteria.
     *
     * ```js
     * app.model('user').find({
     *   page: { offset: 20, limit: 40 },
     *   sort: { name: 'asc', age: 'desc' },
     *   fields: { password: false },
     *   filter: {
     *     age: { $gt: 20, $lte: 10 },
     *     name: { $in: [ 'Billy', 'Bob' ] },
     *     username: 'billybob',
     *   },
     * }).then(users => {
     *   // ResourceArray
     * });
     * ```
     *
     * @param {Object} [options = {}] - Pagination, sorting, fields, and filters.
     * @return {Promise}
     */
    value: function find() {
      var _this = this;

      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      return this.adapter.find(this, options).then(function (data) {
        return Promise.resolve(_resourceArray2['default'].create(_this, data));
      });
    }

    /**
     * This method retrieves a single resource from the adapter.
     *
     * ```js
     * app.model('user').findResource('123').then(user => {
     *   // Resource
     * });
     * ```
     *
     * @param {String} id
     * @return {Promise}
     */
  }, {
    key: 'findResource',
    value: function findResource(id) {
      var _this2 = this;

      return this.adapter.findRecord(this, id).then(function (record) {
        return Promise.resolve(_resource2['default'].create(_this2, record));
      });
    }

    /**
     * This method retrieves a single resource from the adapter based on the options
     * criteria, i.e. this method is an alias for finding many resources and then
     * returning the first result.
     *
     * ```js
     * app.model('user').findOne({
     *   page: { offset: 20, limit: 40 },
     *   sort: { name: 'asc', age: 'desc' },
     *   fields: { password: false },
     *   filter: {
     *     age: { $gt: 20, $lte: 10 },
     *     name: { $in: [ 'Billy', 'Bob' ] },
     *     username: 'billybob',
     *   },
     * }).then(user => {
     *   // Resource
     * });
     * ```
     *
     * @param {Object} [options = {}] - Pagination, sorting, fields, and filters.
     * @return {Promise}
     */
  }, {
    key: 'findOne',
    value: function findOne() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      return this.find(options).then(function (records) {
        var resource = records && records.resources && records.resources[0];

        return Promise.resolve(resource || null);
      });
    }

    /**
     * This method retrieves either a single resource or many resources that are
     * related to a particular resource and meet the options criteria. For example,
     * this method can be used to return a resource defined by a to-one relationship.
     * This method can also be used to return a resource array defined by a to-many
     * relationship.
     *
     * ```js
     * // To-many relationship.
     * app.model('user').findRelated('123', 'pets', {
     *   page: { offset: 2, limit: 5 },
     *   sort: { species: 'asc', age: 'desc' },
     *   filter: {
     *     color: { $in: [ 'Black', 'White' ] },
     *   },
     * }).then(user => {
     *   // ResourceArray
     * });
     *
     * // To-one relationship.
     * app.model('user').findRelated('123', 'company').then(user => {
     *   // Resource
     * });
     * ```
     *
     * @param {String} id - The ID of the parent resource.
     * @param {String} field - The relationship name, i.e. 'pets'.
     * @param {Object} [options = {}] - Pagination, sorting, fields, and filters.
     * @return {Promise}
     */
  }, {
    key: 'findRelated',
    value: function findRelated(id, field) {
      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      if (!(field in this.relationships)) return Promise.resolve(null);

      var model = this.relationships[field].model;
      var type = model.type;

      return this.findResource(id).then(function (resource) {
        var relationship = resource.relationship(field);
        var isMany = relationship.isMany;
        var model = relationship.model;
        var child = relationship.child;

        if (!isMany) return resource.get(field);

        var ids = child instanceof _resourceArray2['default'] ? child.resources.map(function (resource) {
          return resource.id;
        }) : child;

        Object.assign(options, { ids: ids });

        return model.find(options);
      }).then(function (related) {
        return Promise.resolve(related);
      });
    }

    /**
     * This method creates a resource and persists it in the adapter.
     *
     * ```js
     * app.model('user').create({
     *   name: 'Bobby',
     *   email: 'bobby@gmail.com',
     *   password: 'ilikecheese',
     *   pets: [ '123', '456' ],
     *   company: '789',
     * }).then(user => {
     *   // Resource
     * });
     * ```
     *
     * @param {Object} body - Flattened json of attributes and relationships.
     * @return {Promise}
     */
  }, {
    key: 'create',
    value: function create(body) {
      var _this3 = this;

      return this.adapter.create(this, body).then(function (data) {
        return Promise.resolve(_resource2['default'].create(_this3, data));
      });
    }

    /**
     * This method updates a resource and persists it in the adapter.
     *
     * ```js
     * app.model('user').update({
     *   name: 'Jimmy',
     *   pets: [ '123' ],
     * }).then(user => {
     *   // Resource
     * });
     * ```
     *
     * @param {String} id - The ID of the resource to be updated.
     * @param {Object} update - Flattened json of attributes and relationships.
     * @return {Promise}
     */
  }, {
    key: 'update',
    value: function update(id, _update) {
      var _this4 = this;

      return this.adapter.update(this, id, _update).then(function (data) {
        return Promise.resolve(_resource2['default'].create(_this4, data));
      });
    }

    /**
     * This method deletes a resource.
     *
     * ```js
     * app.model('user').delete('123').then(success => {
     *   // Boolean
     * });
     * ```
     *
     * @param {String} id - The ID of the resource to be deleted.
     * @return {Promise}
     */
  }, {
    key: 'delete',
    value: function _delete(id) {
      return this.adapter['delete'](this, id);
    }
  }], [{
    key: 'create',
    value: function create() {
      return new (_bind.apply(Model, [null].concat(_slice.call(arguments))))();
    }
  }]);

  return Model;
})();

exports['default'] = Model;
module.exports = exports['default'];