'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var _bind = Function.prototype.bind;
var _slice = Array.prototype.slice;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

var _relationship = require('../relationship');

var _relationship2 = _interopRequireDefault(_relationship);

var _resourceArray = require('../resource-array');

var _resourceArray2 = _interopRequireDefault(_resourceArray);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _i = require('i');

var _i2 = _interopRequireDefault(_i);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utilsConfigureAttributes = require('./utils/configure-attributes');

var _utilsConfigureAttributes2 = _interopRequireDefault(_utilsConfigureAttributes);

var _utilsConfigureRelationships = require('./utils/configure-relationships');

var _utilsConfigureRelationships2 = _interopRequireDefault(_utilsConfigureRelationships);

var _utilsCompoundDocument = require('./utils/compound-document');

var _utilsCompoundDocument2 = _interopRequireDefault(_utilsCompoundDocument);

/**
 * A resource is a representation of a real piece of data from the adapter.
 *
 * @class Resource
 */

var Resource = (function () {
  /**
   * @ignore
   */

  function Resource(model, data) {
    _classCallCheck(this, Resource);

    if (undefined === model) throw Error('The `model` argument is required to create a resource');

    if (!(model instanceof _index2['default'])) throw new TypeError('The `model` argument must be an instance of `Model`');

    if (undefined === data) throw new Error('The `data` argument is required to instantiate a resource');

    this.model = model;
    this.type = model.type;
    this.id = data.id;

    var attributes = model.attributes;
    var relationships = model.relationships;

    this.attributes = {};
    Object.assign(this.attributes, (0, _utilsConfigureAttributes2['default'])(attributes, data));

    this.relationships = {};
    Object.assign(this.relationships, (0, _utilsConfigureRelationships2['default'])(this, relationships, data));
  }

  /**
   * @ignore
   */

  _createClass(Resource, [{
    key: 'attribute',

    /**
     * Returns the value of a resource's attribute.
     *
     * ```js
     * app.model('user').findResource('123').then(user => {
     *   const name = user.attribute('name'); // Billy
     * })
     * ```
     *
     * @param {String} field
     * @return {(Number|String|Date|Boolean)}
     */
    value: function attribute(field) {
      return this.attributes[field];
    }

    /**
     * Returns an object of attributes.
     *
     * ```js
     * app.model('user').findResource('123').then(user => {
     *   const { name, email } = user.attributes('name', 'email');
     * })
     * ```
     *
     * @param {...String} fields
     * @return {Object}
     */
  }, {
    key: 'attributes',
    value: function attributes() {
      var attributes = {};

      for (var _len = arguments.length, fields = Array(_len), _key = 0; _key < _len; _key++) {
        fields[_key] = arguments[_key];
      }

      for (var field in fields) {
        attributes[field] = this.attribute(field);
      }return attributes;
    }

    /**
     * Returns a resource's relationship.
     *
     * ```js
     * app.model('user').findResource('123').then(user => {
     *   const pets = user.relationship('pets'); // Relationship
     * })
     * ```
     *
     * @param {String} field
     * @return {Relationship}
     */
  }, {
    key: 'relationship',
    value: function relationship(field) {
      return this.relationships[field];
    }

    /**
     * Returns either an attribute, resource, or resource array that is related to
     * a resource.
     *
     * ```js
     * app.model('user').findResource('123').then(user => {
     *   const name = user.get('name'); // Billy
     *   return user.get('pets');
     * }).then(pets => {
     *   // ResourceArray
     *   const spot = pets.resources[0]; // Resource
     *   return spot.get('treat');
     * }).then(treat => {
     *   // Resource
     *   const flavor = treat.get('flavor');
     * });
     *
     * @param {String} field
     * @return {(String|Number|Date|Boolean|Promise)}
     */
  }, {
    key: 'get',
    value: function get(field) {
      var _this = this;

      var attributes = this.attributes;
      var relationships = this.relationships;

      if (field in attributes) return attributes[field];

      if (field in relationships) {
        var _ret = (function () {
          var _relationships$field = relationships[field];
          var child = _relationships$field.child;
          var type = _relationships$field.type;
          var model = _relationships$field.model;

          return {
            v: new _bluebird2['default'](function (resolve, reject) {
              if (child instanceof _resourceArray2['default'] || child instanceof Resource) return resolve(child);

              if (Object.is(child, null)) return resolve(null);

              var isMany = Array.isArray(child);

              var retrieve = isMany ? model.find({ ids: child }) : model.findResource(child);

              retrieve.then(function (resolved) {
                _this.relationships[field].child = resolved;
                return resolve(resolved);
              })['catch'](function (err) {
                return reject(err);
              });
            })
          };
        })();

        if (typeof _ret === 'object') return _ret.v;
      }

      return null;
    }

    /**
     * Sets a resource's relationship called `field` with `target`.
     *
     * ```js
     * app.model('user').findResource('123').then(user => {
     *   return user.set('company', '123');
     * }).then(user => {
     *   // Resource
     * })
     *
     * @param {String} field
     * @return {(String|Number|Date|Boolean|Promise)}
     */
  }, {
    key: 'set',
    value: function set(field, target) {
      var relationship = this.relationship(field);

      return relationship && relationship.set(target);
    }

    /**
     * Updates a resource.
     *
     * ```js
     * app.model('user').findResource('123').then(user => {
     *   // Resource
     *   return user.update({
     *     name: 'Billy',
     *     pets: [ '424', '124' ],
     *     company: '12',
     *   });
     * }).then(user => {
     *   // Resource
     * });
     * ```
     *
     * @param {Object} update - Flattened json of relationships and attributes.
     * @return {Promise}
     */
  }, {
    key: 'update',
    value: function update(_update) {
      return this.model.update(this.id, _update);
    }

    /**
     * Deletes a resource.
     *
     * ```js
     * app.model('user').delete('123').then(success => {
     *   // Boolean
     * })
     * ```
     *
     * @return {Promise}
     */
  }, {
    key: 'delete',
    value: function _delete() {
      return this.model['delete'](this.id);
    }

    /**
     * Serializes a resource.
     *
     * @private
     * @param {Object} [options={}]
     * @return {Object}
     */
  }, {
    key: 'serialize',
    value: function serialize() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var id = this.id;
      var model = this.model;
      var type = this.type;

      var i = (0, _i2['default'])();
      var pluralType = i.pluralize(type);
      var attributes = {};
      var relationships = {};
      var included = [];

      var namespace = undefined !== options.namespace ? '/' + options.namespace : '';

      Object.assign(attributes, this.attributes);

      for (var relationship in model.relationships) {
        var isMany = model.relationships[relationship].isMany;

        var child = this.relationships[relationship].child;

        if (!(relationship in this.relationships) || Array.isArray(child) && !child.length || Object.is(child, null)) {

          var links = {
            self: namespace + '/' + pluralType + '/' + id + '/relationships/' + relationship,
            related: namespace + '/' + pluralType + '/' + id + '/' + relationship
          };

          relationships[relationship] = isMany ? { links: links, data: [] } : { links: links, data: null };

          continue;
        }

        if (child instanceof Resource) {
          var isIncluded = undefined !== _lodash2['default'].find(included, {
            id: '' + child.id, type: child.type
          });

          relationships[relationship] = {
            links: {
              self: namespace + '/' + pluralType + '/' + id + '/relationships/' + relationship,
              related: namespace + '/' + pluralType + '/' + id + '/' + relationship
            },
            data: {
              id: '' + child.id,
              type: child.type
            }
          };

          if (!isIncluded) included.push((0, _utilsCompoundDocument2['default'])(child, { namespace: namespace }));

          continue;
        }

        if (child instanceof _resourceArray2['default']) {
          relationships[relationship] = {
            links: {
              self: namespace + '/' + pluralType + '/' + id + '/relationships/' + relationship,
              related: namespace + '/' + pluralType + '/' + id + '/' + relationship
            },
            data: child.resources.map(function (resource) {
              return { id: '' + resource.id, type: resource.type };
            })
          };

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = child.resources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var r = _step.value;

              var isIncluded = undefined !== _lodash2['default'].find(included, {
                id: '' + child.id, type: child.type
              });

              if (!isIncluded) included.push((0, _utilsCompoundDocument2['default'])(r, { namespace: namespace }));
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          continue;
        }
      }

      return {
        links: { self: namespace + '/' + pluralType + '/' + id },
        data: {
          id: '' + id,
          type: type,
          attributes: attributes,
          relationships: relationships
        },
        included: included
      };
    }
  }], [{
    key: 'create',
    value: function create() {
      return new (_bind.apply(Resource, [null].concat(_slice.call(arguments))))();
    }
  }]);

  return Resource;
})();

exports['default'] = Resource;
module.exports = exports['default'];