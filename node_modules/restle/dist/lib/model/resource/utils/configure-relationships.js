'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = configureRelationships;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _relationship = require('../../relationship');

var _relationship2 = _interopRequireDefault(_relationship);

var _resourceArray = require('../../resource-array');

var _resourceArray2 = _interopRequireDefault(_resourceArray);

var _resource = require('../../resource');

var _resource2 = _interopRequireDefault(_resource);

/**
 * This configures relationships for serializing relationships.
 *
 * @private
 * @param {Model} parent
 * @param {Object} relationships
 * @param {Object} data
 * @return {Object}
 */

function configureRelationships(parent, relationships, data) {
  var result = {};

  for (var field in relationships) {
    var _relationships$field = relationships[field];
    var isMany = _relationships$field.isMany;
    var type = _relationships$field.type;
    var model = _relationships$field.model;

    var value = data[field];
    var child = undefined;

    if (undefined !== value) {
      if (Array.isArray(value)) {
        var hasIds = undefined !== value[0] && undefined !== value[0].id;

        child = hasIds ? _resourceArray2['default'].create(model, value) : value;
      } else {
        var hasId = undefined !== value.id;

        child = hasId ? _resource2['default'].create(model, value) : value;
      }
    } else {
      child = isMany ? _resourceArray2['default'].create(model, null) : null;
    }

    result[field] = _relationship2['default'].create(parent, child, {
      model: model, field: field, type: type, isMany: isMany
    });
  }

  return result;
}

;
module.exports = exports['default'];