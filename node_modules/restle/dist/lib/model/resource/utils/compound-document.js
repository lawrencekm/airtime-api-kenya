'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = compoundDocument;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _resourceArray = require('../../resource-array');

var _resourceArray2 = _interopRequireDefault(_resourceArray);

var _resource = require('../../resource');

var _resource2 = _interopRequireDefault(_resource);

var _i = require('i');

var _i2 = _interopRequireDefault(_i);

/**
 * This serializes an included document used for serializing a resource.
 *
 * @private
 * @param {Object} resource
 * @param {Object} [options={}]
 * @return {Object}
 */

function compoundDocument(resource) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var i = (0, _i2['default'])();
  var id = resource.id;
  var type = resource.type;
  var attributes = resource.attributes;
  var namespace = options.namespace;

  var links = {
    self: namespace + '/' + i.pluralize(type) + '/' + id
  };

  var include = {
    id: '' + id,
    type: type, links: links, attributes: attributes,
    relationships: {}
  };

  var _loop = function (field) {
    var relationship = resource.relationships[field];
    var child = relationship.child;
    var isMany = relationship.isMany;

    if (child instanceof _resource2['default']) {
      include.relationships[field] = {
        data: {
          id: '' + child.id,
          type: child.type
        }
      };

      return 'continue';
    }

    if (child instanceof _resourceArray2['default']) {
      include.relationships[field] = {
        data: child.resources.map(function (resource) {
          return { id: '' + resource.id, type: resource.type };
        })
      };

      return 'continue';
    }

    if (Array.isArray(child) && child.length) {
      include.relationships[field] = {
        data: child.map(function (c) {
          return { id: '' + c, type: relationship.type };
        })
      };

      return 'continue';
    }

    // FIXME: figure out the real edge cases here
    if (!Array.isArray(child) && child !== undefined && child !== null) {
      include.relationships[field] = {
        data: { id: '' + child, type: relationship.type }
      };

      return 'continue';
    }

    include.relationships[field] = isMany ? { data: [] } : { data: null };
  };

  for (var field in resource.relationships) {
    var _ret = _loop(field);

    if (_ret === 'continue') continue;
  }

  return include;
}

module.exports = exports['default'];