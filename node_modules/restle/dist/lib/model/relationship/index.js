'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var _bind = Function.prototype.bind;
var _slice = Array.prototype.slice;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _resource = require('../resource');

var _resource2 = _interopRequireDefault(_resource);

var _resourceArray = require('../resource-array');

var _resourceArray2 = _interopRequireDefault(_resourceArray);

var _i = require('i');

var _i2 = _interopRequireDefault(_i);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _restleError = require('restle-error');

var Relationship = (function () {
  function Relationship(parent, child) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    _classCallCheck(this, Relationship);

    if (undefined === parent) throw new Error('The `parent` argument is required for creating a relationship');

    if (!parent instanceof _resource2['default']) {
      throw new TypeError('The `parent` argument must be of type `Resource`');
    }

    this.parent = parent;
    this.child = child;

    Object.assign(this, {
      model: options.model,
      field: options.field,
      isMany: options.isMany,
      type: options.type
    });
  }

  _createClass(Relationship, [{
    key: 'set',
    value: function set(target) {
      var _this = this;

      if (undefined === target) return Promise.reject(new TypeError('Cannot set a relationship with undefined.'));

      var parent = this.parent;
      var child = this.child;
      var isMany = this.isMany;
      var field = this.field;
      var type = this.type;
      var model = this.model;

      // to-one
      if (target instanceof _resource2['default']) {
        if (isMany) {
          return Promise.reject(new _restleError.RelationshipError({
            type: 'to-many', method: 'set', target: 'resource'
          }));
        }

        this.child = target;
        return parent.update(_defineProperty({}, field, target.id));
      }

      // to-many
      if (target instanceof _resourceArray2['default']) {
        if (!isMany) {
          return Promise.reject(new _restleError.RelationshipError({
            type: 'to-one', method: 'set', target: 'resource array'
          }));
        }

        this.child = target;
        return parent.update(_defineProperty({}, field, target.resources.map(function (resource) {
          return resource.id;
        })));
      }

      if (Array.isArray(target) && !isMany) {
        return Promise.reject(new _restleError.RelationshipError({
          type: 'to-one', method: 'set', target: 'array'
        }));
      } else if (!Array.isArray(target) && isMany) {
        return Promise.reject(new _restleError.RelationshipError({
          type: 'to-many', method: 'set', target: 'single value'
        }));
      }

      // array
      if (Array.isArray(target)) {
        return new Promise(function (resolve, reject) {

          model.find({ ids: target }).then(function (resources) {
            _this.child = resources;
            return parent.update(_defineProperty({}, field, target));
          }).then(function (resource) {
            return resolve(resource);
          })['catch'](function (err) {
            return reject(err);
          });
        });
      }

      // id
      return new Promise(function (resolve, reject) {
        model.findResource(target).then(function (resource) {
          _this.child = resource;
          return parent.update(_defineProperty({}, field, target));
        }).then(function (resource) {
          return resolve(resource);
        })['catch'](function (err) {
          return reject(err);
        });
      });
    }
  }, {
    key: 'append',
    value: function append(target) {
      if (undefined === target) return Promise.reject(new TypeError('Cannot set a relationship with undefined.'));

      if (!this.isMany) return Promise.reject(new _restleError.RelationshipError({ type: 'to-one', method: 'append', target: 'value' }));

      var parent = this.parent;
      var field = this.field;

      if (!this.child.resources) this.child.resources = [];

      var ids = this.child.resources.map(function (resource) {
        return resource.id;
      });

      if (target instanceof _resource2['default']) {
        ids.push(target.id);
        this.child.resources.push(target);

        return parent.update(_defineProperty({}, field, ids));
      }

      if (target instanceof _resourceArray2['default']) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = target.resources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var resource = _step.value;

            ids.push(resource.id);
            this.child.resources.push(resource);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return parent.update(_defineProperty({}, field, ids));
      }

      if (Array.isArray(target)) {
        ids.push.apply(ids, _toConsumableArray(target));
      } else {
        ids.push(target);
      }

      return this.set(Array.isArray(target) ? target : [target]);
    }
  }, {
    key: 'delete',
    value: function _delete(target) {
      var isMany = this.isMany;
      var field = this.field;
      var parent = this.parent;

      if (undefined === target) {
        return isMany ? parent.update(_defineProperty({}, field, [])) : parent.update(_defineProperty({}, field, null));
      }

      if (target instanceof _resourceArray2['default']) {
        var ids = this.child.resources.filter(function (resource) {
          return target.indexOf(resource.id) >= 0;
        });

        return parent.update(_defineProperty({}, field, ids));
      }

      // FIXME: edge cases and errors
    }
  }, {
    key: 'serialize',
    value: function serialize() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var isMany = this.isMany;
      var parent = this.parent;
      var child = this.child;
      var field = this.field;

      var namespace = undefined !== options.namespace ? '/' + options.namespace : '';

      var i = (0, _i2['default'])();

      var serialized = {
        links: {
          self: namespace + '/' + i.pluralize(parent.type) + '/' + parent.id + '/relationships/' + field,
          related: namespace + '/' + i.pluralize(parent.type) + '/' + parent.id + '/' + field
        }
      };

      if (child instanceof _resourceArray2['default']) {
        serialized.data = child.resources.map(function (resource) {
          return { type: resource.type, id: '' + resource.id };
        });

        return serialized;
      }

      if (child instanceof _resource2['default']) {
        serialized.data = {
          type: child.type,
          id: '' + child.id
        };

        return serialized;
      }

      serialized.data = isMany ? [] : null;
      return serialized;
    }
  }], [{
    key: 'create',
    value: function create() {
      return new (_bind.apply(Relationship, [null].concat(_slice.call(arguments))))();
    }
  }]);

  return Relationship;
})();

exports['default'] = Relationship;
module.exports = exports['default'];