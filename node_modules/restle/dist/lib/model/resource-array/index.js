'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var _bind = Function.prototype.bind;
var _slice = Array.prototype.slice;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _resource = require('../resource');

var _resource2 = _interopRequireDefault(_resource);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

var _i = require('i');

var _i2 = _interopRequireDefault(_i);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

/**
 * A ResourceArray is a class that handles multiple resources.
 *
 * @class ResourceArray
 */

var ResourceArray = (function () {
  /**
   * @ignore
   */

  function ResourceArray(model, data) {
    _classCallCheck(this, ResourceArray);

    if (undefined === model) throw Error('The `model` argument is required to create a resource array.');

    if (!(model instanceof _index2['default'])) throw new TypeError('The `model` argument must be an instance of `Model`.');

    this.model = model;
    this.type = model.type;
    this.count = data && data.count || 0;

    this.resources = data ? data.map(function (resource) {
      return _resource2['default'].create(model, resource);
    }) : [];
  }

  /**
   * @ignore
   */

  _createClass(ResourceArray, [{
    key: 'serialize',

    /**
     * @ignore
     */
    value: function serialize() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var resources = this.resources;
      var count = this.count;
      var model = this.model;

      var i = (0, _i2['default'])();
      var data = [];
      var included = [];
      var plural = i.pluralize(model.type);
      var namespace = undefined !== options.namespace ? '/' + options.namespace : '';

      var links = {
        self: namespace + '/' + plural
      };

      // TODO: default limit
      if ('page' in options) {
        var limit = options.page.limit || 0;
        var offset = options.page.offset || 0;
        links.page = {};

        // prev
        if (offset > 0) links.page.prev = namespace + '/' + plural + '?page[offset]&page[limit]';

        // next
        if (count > limit + offset) links.page.next = '' + namespace;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = resources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var resource = _step.value;

          var serialized = resource.serialize();

          data.push(serialized.data);

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = serialized.included[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var include = _step2.value;

              var id = '' + include.id;

              if (!_lodash2['default'].find(included, { id: id })) included.push(include);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                _iterator2['return']();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return {
        data: data, links: links, included: included, meta: { total: count }
      };
    }
  }, {
    key: 'length',

    /**
     * @ignore
     */
    get: function get() {
      return this.resources.length;
    }
  }], [{
    key: 'create',
    value: function create() {
      return new (_bind.apply(ResourceArray, [null].concat(_slice.call(arguments))))();
    }
  }]);

  return ResourceArray;
})();

exports['default'] = ResourceArray;
module.exports = exports['default'];