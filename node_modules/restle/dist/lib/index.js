'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _events = require('events');

var _router = require('./router');

var _router2 = _interopRequireDefault(_router);

var _model = require('./model');

var _model2 = _interopRequireDefault(_model);

var _restleMemory = require('restle-memory');

var _restleMemory2 = _interopRequireDefault(_restleMemory);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utilsParseModelName = require('./utils/parse-model-name');

var _utilsParseModelName2 = _interopRequireDefault(_utilsParseModelName);

var _utilsAssignOptions = require('./utils/assign-options');

var _utilsAssignOptions2 = _interopRequireDefault(_utilsAssignOptions);

var _utilsConfigureCors = require('./utils/configure-cors');

var _utilsConfigureCors2 = _interopRequireDefault(_utilsConfigureCors);

var _utilsConfigureBodyParser = require('./utils/configure-body-parser');

var _utilsConfigureBodyParser2 = _interopRequireDefault(_utilsConfigureBodyParser);

/**
 * Restle is a database-agnostic, JSON API engine. Restle handles data objects
 * and the relationships between them. Restle has an in-memory adapter baked in,
 * which means you can begin creating a Restle app without a database in mind.
 *
 * ```js
 * const Restle = require('restle');
 * const app = new Restle({
 *   port: 3000,
 *   namespace: 'api',
 * });
 *
 * app.on('ready', () => console.log('Listening on port ${app.port}'));
 * ```
 *
 * @class Restle
 * @constructor
 * @param {Object} options
 */

var Restle = (function (_EventEmitter) {
  _inherits(Restle, _EventEmitter);

  function Restle() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Restle);

    if (typeof options !== 'object') throw new TypeError('Argument "options" must be an object.');

    _get(Object.getPrototypeOf(Restle.prototype), 'constructor', this).call(this);

    // FIXME: hacky
    options.restle = this;

    (0, _utilsAssignOptions2['default'])(this, options);
    (0, _utilsConfigureBodyParser2['default'])(this);
    (0, _utilsConfigureCors2['default'])(this);

    // use the router
    this.app.use('' + this.namespace, this.router.router);

    // start express app
    this.server = this.app.listen(this.port);
  }

  /**
   * Asynchronously disconnect the HTTP server and database adapters.
   *
   * @return {Promise}
   */

  _createClass(Restle, [{
    key: 'disconnect',
    value: function disconnect() {
      var _this = this;

      var models = this.models;
      var adapters = [];

      return new Promise(function (resolve, reject) {
        // close express server
        _this.server.close();

        for (var model in models) {
          adapters.push(models[model].adapter.disconnect());
        }Promise.all(adapters).then(function () {
          _this.emit('disconnected');
          return resolve();
        })['catch'](function (err) {
          return reject(err);
        });
      });
    }

    /**
     * This method registers a model of type `name` with `schema`.
     *
     * @todo Refactor into single loop.
     * @todo Remove lodash dependency.
     * @param {Object} schemas
     * @return {Promise}
     */
  }, {
    key: 'register',
    value: function register(schemas) {
      var _this2 = this;

      var adapters = [];
      adapters.push(this.adapter.connect());

      var _loop = function (_name) {
        var adapter = _this2.adapter;
        var schema = schemas[_name];
        var type = (0, _utilsParseModelName2['default'])(_name);

        // override default adapter
        if (schema.options && schema.options.adapter) {
          adapter = schema.options.adapter;
          adapters.push(adapter.connect());
        }

        var model = _model2['default'].create(_name, schema, adapter);

        // populate created model relationships
        _this2.models[type] = model;

        _lodash2['default'].each(model.relationships, function (relationship) {
          _lodash2['default'].forOwn(_this2.models, function (value, key) {
            if (value.type === type) return;

            if (value.type === relationship.type) {
              relationship.model = value;
              return false;
            }
          });
        });

        // populate all other models relationships
        _lodash2['default'].forOwn(_this2.models, function (value, key) {
          if (key === type) return false;

          _lodash2['default'].each(value.relationships, function (relationship) {
            if (relationship.type === type) {
              relationship.model = model;
              return false;
            }
          });
        });
      };

      for (var _name in schemas) {
        _loop(_name);
      }

      Promise.all(adapters).then(function () {
        return _this2.emit('ready');
      });
    }

    /**
     * This method fires an event after a resource is created within Restle, but
     * before that resource is serialized by the router.
     *
     * @param {String} event
     * @callback {afterCallback} cb
     */
  }, {
    key: 'after',
    value: function after(event, cb) {
      return this.on(event + '.after', cb);
    }

    /**
     * This method fires an event before a resource is created within Restle.
     *
     * ```js
     * app.before('user.create', (req, res, next) => {
     *   const numRounds = 10;
     *   const password = req.body.data.attributes.password;
     *
     *   bcrypt.hash(password, numRounds, (err, hash) => {
     *     if (err) {
     *       return res.status(500).json(err);
     *     }
     *
     *     req.body.data.attributes.password = hash;
     *     return next();
     *   });
     * })
     * ```
     *
     * @param {String} event
     * @callback {beforeCallback} cb
     */
  }, {
    key: 'before',
    value: function before(event, cb) {
      return cb ? this.on(event + '.before', cb) : this.on('before', event);
    }

    /**
     * Returns a model from the models registry.
     *
     * @param {String} name
     * @return {Model} model
     */
  }, {
    key: 'model',
    value: function model(name) {
      return this.models[(0, _utilsParseModelName2['default'])(name)];
    }

    /**
     * Create a custom route at `/endpoint` with the HTTP verb `method`.
     * The callback function takes in the express objects `req`, `res`
     * and `next`.
     *
     * ```js
     * app.route('/protected', 'post', (req, res, next) => {
     *   if (req.get('authorization') !== process.env.API_KEY) {
     *     return res.sendStatus(403);
     *   }
     *
     *   return next();
     * });
     * ```
     *
     * @param {String} endpoint
     * @param {String} method
     * @param {Function} callback
     */
  }, {
    key: 'route',
    value: function route(endpoint, method, callback) {
      var app = this.app;
      var router = new _express2['default'].Router();

      router.route('/')[method](callback);
      app.use(endpoint, router);
    }
  }]);

  return Restle;
})(_events.EventEmitter);

exports['default'] = Restle;
module.exports = exports['default'];